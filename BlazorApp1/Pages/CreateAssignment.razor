@page "/createassignment"

@inject NavigationManager UriHelper

@using Objects
@using System.Text;

@inject IJSRuntime JS;


<script suppress-error="BL9992">
   function ShowHideDiv(){
        var fileCheck = document.getElementById("fileBtn");
        var dvFile = document.getElementById("dvFile");
        dvFile.style.display = fileCheck.checked ? "block" : "none";
   }
</script>

<script suppress-error="BL9992" src="~/JSFolder/upload.js"></script>

<h3>Create Assignment</h3>
<br>

<Popup @ref="popupRef" />



@foreach (AssignmentQuestion Q in questions)
{
    <p>Question @Q.ID</p>
    <div class="questionBox">

        Question:
        <input type="text" @bind="Q.question" placeholder="@Q.question" required /> <br><br>
        Question Type:
        <label for="radioBtn">
            <input type="radio" id="radioBtn" name="@Q.ID" value="radio" onclick="ShowHideDiv()"/>
            radio
        </label>
        <label for="checkboxBtn">
            <input type="radio" id="checkboxBtn" name="@Q.ID" value="checkbox" onclick="ShowHideDiv()" />
            checkbox
        </label>
        <label for="textBtn">
            <input type="radio" id="textBtn" name="@Q.ID" value="text" onclick="ShowHideDiv()" />
            text
        </label>

        <label for="fileBtn">
            <input type="radio" id="fileBtn" name="@Q.ID" value="file" onclick="ShowHideDiv()" />
            file
        </label><br><br>

        <div id="dvFile" style="display: none">
            <br>
        
          <div class="drag-area">
              <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
            <div class="icon"><i class="fas fa-cloud-upload-alt"></i></div>
            <header>Drag & Drop to Upload File</header>
            <span>OR</span>
            <button>Browse File</button>
            <input type="file" hidden>
          </div>

           
                <br> <br>
        </div>

        

        Options: 
        <input type="text" @bind="Q.StringOptions" placeholder="@Q.StringOptions" required /> <br><br>

        Correct Answer:
        <input type="text" @bind="Q.StringAnswers" placeholder="@Q.StringAnswers" required /> <br><br>

        Points:
        <input type="text" @bind="Q.StringPoints" placeholder="@Q.StringPoints" required /><br> <br>


        <label for="">Distribution</label><br>
        <div class="questionBox">
            @foreach (string[] s in Q.skills)
            {
                <div class="skillBox">

                    <select name="Files" id="Files" @bind="s[0]">
                        <option disabled selected value> -- select an option -- </option>
                        @foreach (string file in File.ReadAllLines(GenFolderPath + "User Skills.txt"))
                        {
                            <option>@file</option>
                        }
                    </select>

                    <input type="text" @bind="s[1]" placeholder="XP" required /> <br>

                    <button @onclick="() => deleteSkill(s,Q)" style="float: right">Delete Skill</button><br>
                </div>

            }
            <button @onclick="() => addSkill(Q)" style="float: right">Add Skill</button><br>
        </div>

    </div>
    <br>
}

<button @onclick="add" style="float: right">add question</button><br><br>

<label for="">Due date</label>
<input type="date" @bind="Due" id="start" name="trip-start" min="2000-01-01" max="2099-12-31"><br><br>

<label for="">Assignment name</label>
<input type="text" @bind-value="Name" placeholder="Assignment name" /><br><br>

<button @onclick="done" style="float: left">done</button>

<button @onclick="back" style="float: left">back</button><br><br>

@code {

    private string GenFolderPath = Directory.GetCurrentDirectory() + @"\UserRecords\General\";
    private List<AssignmentQuestion> questions = new List<AssignmentQuestion>();
    private List<string[]> skills = new List<string[]>();
    private string Name, FileDesPath, questionType;
    private DateTime Due;
    int QuestionCount = 1;

    protected override void OnInitialized()
    {
        add();
    }

    public void add()
    {
        AssignmentQuestion Q = new AssignmentQuestion();
        Q.ID = QuestionCount+"";
        QuestionCount++;
        string[] hold = { "", "" };
        Q.skills.Add(hold);
        questions.Add(Q);
    }

    public void deleteSkill(String[] s, AssignmentQuestion Q)
    {
        Q.skills.Remove(s);
    }

    public void addSkill(AssignmentQuestion Q)
    {
        string[] hold = { "", "" };
        Q.skills.Add(hold);
    }

    public async void done()
    {
        if (Name == null)
        {
            Alert("Need to give assignment a name");
            return;
        }
        else if(Due == null)
        {
            Alert("Need to give assignment a due date");
            return;
        }

        FileDesPath = Directory.GetCurrentDirectory() + @"\AssignmentFolder\" + Name;

        FileStream FileWrite = new FileStream(FileDesPath, FileMode.Create, FileAccess.Write, FileShare.None);

        string AssignmentInfo = "DUE|\n" + Due +"\n";

        foreach(AssignmentQuestion Q in questions)
        {
            questionType = await JS.InvokeAsync<string>("RadioButtons", Q.ID);

            AssignmentInfo += "questions|\n" + Q.question + "\n";

            AssignmentInfo += "type|\n" + questionType.Replace(";","") + "\n";

            AssignmentInfo += "options|\n" + Q.StringOptions.Replace(" ", ";").Substring(0, Q.StringOptions.Replace(" ", ";").Length) + "\n";

            AssignmentInfo += "answer|\n" + Q.StringAnswers.Replace(" ", ";") + "\n";

            AssignmentInfo += "Points|\n" + Q.StringPoints+ "\n";

            AssignmentInfo += "DISTRIBUTION|\n";
            foreach(string[] s in Q.skills)
            {
                AssignmentInfo += s[0] + ";" + s[1] + ";\n";
            }

            AssignmentInfo += "end|\n";
        }

        // Store the text in a byte array with. UTF8 encoding (8-bit Unicode. Transformation Format)
        byte[] writeArr = Encoding.UTF8.GetBytes(AssignmentInfo);

        // Using the Write method write the encoded byte array to the textfile
        FileWrite.Write(writeArr, 0, AssignmentInfo.Length);

        // Closee the FileStream object
        FileWrite.Close();

        UriHelper.NavigateTo($"assignments");
    }

    public void back()
    {
        UriHelper.NavigateTo($"assignments");
    }

    private Popup popupRef;
    public async Task Alert(string message)
    {
        popupRef.Show(message);
    }
}

<style>

.drag-area{
  border: 2px dashed black;
  height: 500px;
  width: 700px;
  border-radius: 5px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
}
.drag-area.active{
  border: 2px solid black;
}
.drag-area .icon{
  font-size: 100px;
            color: black;
}
.drag-area header{
  font-size: 30px;
  font-weight: 500;
            color: black;
}
.drag-area span{
  font-size: 25px;
  font-weight: 500;
            color: black;
  margin: 10px 0 15px 0;
}
.drag-area button{
  padding: 10px 25px;
  font-size: 20px;
  font-weight: 500;
  border: none;
  outline: none;
            background: black;
  color: white;
  border-radius: 5px;
  cursor: pointer;
}
.drag-area img{
  height: 100%;
  width: 100%;
  object-fit: cover;
  border-radius: 5px;
}
</style>