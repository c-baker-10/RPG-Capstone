@layout LoginLayout

@page "/"

@using Microsoft.AspNetCore.Cryptography.KeyDerivation;
@using System.Security.Cryptography;
@using Objects
@using System.Text;

@inject NavigationManager UriHelper
@inject IJSRuntime JS;

@if (hasAccount)
{
    <h1> RPG Classroom Login</h1>

    <EditForm Model="@user">
        @if (!currectAccount)
        {
            <p>Your user name is not correct</p>
        }
        <label for="UserName"> User Name</label>
        <InputText id="UserName" @bind-Value="@name" placeholder="username" /> <br />
        @if (!currectPassword)
        {
            <p>Your password is not correct</p>
        }
        <label for="UserPassword"> Password</label>
        <InputText id="UserPassword" @bind-Value="@password" placeholder="password" type="password" /> <br />
    </EditForm>

    <button class="btn btn-primary" @onclick="newAccount"> Make a Account </button>  <br />

    <button class="btn btn-primary" @onclick="Submit"> Submit </button>
}
else
{
    <EditForm Model="@user">
        <p>Please enter a username</p>
        <label for="UserName"> User Name</label>
        <InputText id="UserName" @bind-Value="newName" placeholder="username" /> <br />

        <p>Please enter a password</p>
        <label for="UserPassword"> Password </label>
        <InputText id="UserPassword" @bind-Value="newPassword1" placeholder="password" type="password" /> <br />

        <p>Please enter in the password again</p>
        <label for="UserPassword"> Password </label>
        <InputText id="UserPassword" @bind-Value="newPassword2" placeholder="password" type="password" /> <br />

        <p>Please enter your teachers access code</p>
        <label for="AccessCode"> Access Code </label>
        <InputText id="AccessCode" @bind-Value="accessCode" placeholder="Access Code" /> <br />
    </EditForm>

    <br />

    <h>Check which apply</h>
    <br />

    <input type="radio" id="TeacherBtn" name="accountType" value="Teacher">
    <label for="TeacherBtn">Teacher</label>
    <br />
    <input type="radio" id="StudentgBtn" name="accountType" value="Student">
    <label for="StudentgBtn">Student</label>
    <br />

    <button class="btn btn-primary" @onclick="SubmitNewAccount"> Submit </button>

    <br />
    <br />

    <button class="btn btn-primary" @onclick="Back"> Back </button>
}
@code {

    private User user = new User();
    private string name, password, hashed;
    private List<string> accounts = new List<string>();
    private string UserFolderPath = Directory.GetCurrentDirectory() + @"\UserRecords\";
    private string GenFolderPath = Directory.GetCurrentDirectory() + @"\UserRecords\General\";

    private bool currectAccount = true, currectPassword = true, Teacher = false, Student = false;

    HashAlgorithmName hashAlgorthm = HashAlgorithmName.SHA512;

    private bool hasAccount = true;

    protected override async Task OnInitializedAsync()
    {
        foreach (string file in Directory.GetFiles(UserFolderPath))
        {
            accounts.Add(Path.GetFileNameWithoutExtension(file));
        }
    }

    private void Submit()
    {
        currectAccount = true;
        currectPassword = true;

        // for testing purposes only
        if(name == "test")
        {
            User.UserName = name;
            User.user = user;
            User.user.buildUser();
            UriHelper.NavigateTo($"home");
            return;
        }

        if(name == null)
        {
            currectAccount = false;
            return;
        }
        else if(password == null)
        {
            currectPassword = false;
            return;
        }

        if (!accounts.Contains(name))
        {
            currectAccount = false;
            return;
        }

        User.UserName = name;
        User.user = user;
        User.user.buildUser();

        // Generate a 128-bit salt using a sequence of
        // cryptographically strong random bytes.
        // byte[] salt = RandomNumberGenerator.GetBytes(128 / 8); // divide by 8 to convert bits to bytes

        byte[] salt = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };

        // derive a 256-bit subkey (use HMACSHA256 with 100,000 iterations)
        hashed = Convert.ToBase64String(KeyDerivation.Pbkdf2(
            password: password!,
            salt: salt,
            prf: KeyDerivationPrf.HMACSHA256,
            iterationCount: 100000,
            numBytesRequested: 256 / 8));


        if (User.user.Password == hashed)
        {
            UriHelper.NavigateTo($"home");
        }
        else{
            currectPassword = false;
            return;
        }
    }

    private void newAccount(){
        hasAccount = false;
    }

    private void Back()
    {
        hasAccount = true;
    }

    private string newName, newPassword1, newPassword2, accountInfo, accountType, accessCode;
    private bool validCode;
    private async void SubmitNewAccount()
    {
        accountInfo = "";

        accountType = await JS.InvokeAsync<string>("RadioButtons", "accountType");

        if (newName == null || newPassword1 == null || newPassword2 == null)
        {
            // please fill in all your infomation
        }
        else if (accounts.Contains(newName))
        {
            // account name already taken
        }
        else if (newPassword1 != newPassword2)
        {
            // passwords are not the same
        }
        else if (accountType == "none")
        {
            // please select a account type
        }
        else
        {
            // Read a text file line by line.
            string[] lines = File.ReadAllLines(GenFolderPath + "Access Codes.txt");
            validCode = false;
            foreach(string code in lines)
            {
                if(accessCode == code)
                {
                    validCode = true;
                }
            }
            if (!validCode)
            {
                // wrong access code given
                return;
            }

            FileStream FileWrite = new FileStream(UserFolderPath + newName + ".txt", FileMode.Create, FileAccess.Write, FileShare.None);

            accountInfo += "NAME|\n" + newName + "\n";

            byte[] salt = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };

            // derive a 256-bit subkey (use HMACSHA256 with 100,000 iterations)
            hashed = Convert.ToBase64String(KeyDerivation.Pbkdf2(
                password: newPassword1!,
                salt: salt,
                prf: KeyDerivationPrf.HMACSHA256,
                iterationCount: 100000,
                numBytesRequested: 256 / 8));

            accountInfo += "PASSWORD|\n" + hashed + "\n";

            accountInfo += "TYPE|\n" + accountType + "\n";

            accountInfo += "GENERAL|\nGeneral information\nBADGES|\nNo badges yet\nITEMS|\nNo items yet\nSTUFF|\nRandom information\nLEVEL|\n0\n";

            accountInfo += "DISTRIBUTION|\n";

            // Read a text file line by line.
            lines = File.ReadAllLines(GenFolderPath + "User Skills.txt");
            foreach (string skill in lines)
            {
                accountInfo += skill + ";0\n";
            }

            accountInfo += "TAKEN ASSIGNMENTS|\n";

            // Store the text in a byte array with. UTF8 encoding (8-bit Unicode. Transformation Format)
            byte[] writeArr = Encoding.UTF8.GetBytes(accountInfo);

            // Using the Write method write the encoded byte array to the textfile
            FileWrite.Write(writeArr, 0, accountInfo.Length);

            // Closee the FileStream object
            FileWrite.Close();

            User.UserName = newName;
            User.user = user;
            User.user.buildUser();

            UriHelper.NavigateTo($"home");
        }
    }
}
