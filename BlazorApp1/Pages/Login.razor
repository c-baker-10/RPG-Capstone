@layout LoginLayout

@page "/"

@using Microsoft.AspNetCore.Cryptography.KeyDerivation;
@using System.Security.Cryptography;
@using Objects
@using System.Text;
@using System.Text.RegularExpressions;

@inject NavigationManager UriHelper
@inject IJSRuntime JS;

<script suppress-error="BL9992">
    function ShowHideDiv() {
    var studentCheck = document.getElementById("StudentBtn");
    var dvStudent = document.getElementById("dvStudent");
    dvStudent.style.display = studentCheck.checked ? "block" : "none";
}
</script>


@if (hasAccount)
{
    
    <body>
        <div class="container">
            <form action="">
                <h1>RPG Classroom Login</h1>
                <div class="form-group">
                    @if (!correctAccount)
                    {
                        <p>Your username is not correct</p>
                    }
                    <label for="">Username</label>
                    <input type="text" @bind="name" class="form-control" placeholder="Username" required />
                </div>
                <div class="form-group">
                    @if (!correctPassword)
                    {
                        <p>Your password is not correct</p>
                    }
                    <label for="">Password</label>
                    <input type="password" @bind="password" class="form-control" placeholder="Password" />
                </div>
                <input type="button" @onclick="Submit" class="btn" value="Login" /> <br /><br />
                <input type="button" @onclick="newAccount" class="btn" value="New User" />
            </form>
        </div>
    </body>
  
}
else
{
    <body>
        <div class="container">
            <form action="">
                <h1>Create Account</h1>
                <div class="form-group">
                    <label for="">Username</label>
                    <input type="text" @bind="newName" class="form-control" placeholder="Username" required />

                    <label for="">Password</label>
                    <input type="password" @bind="newPassword1" class="form-control" placeholder="Password" required />

                    <label for="">Confirm Password</label>
                    <input type="password" @bind="newPassword2" class="form-control" placeholder="Confirm Password" required />
                    <br /><br />

                    <span>Please select your account type?</span>
                    <br>
                    <label for="StudentBtn">
                        <input type="radio" id="StudentBtn" name="accountType" onclick="ShowHideDiv()" />
                        Student
                    </label>
                    <br>
                    <label for="TeacherBtn">
                        <input type="radio" id="TeacherBtn" name="accountType" onclick="ShowHideDiv()" />
                        Teacher
                    </label>
                    <br>
                    <label for="AdvisorBtn">
                        <input type="radio" id="AdvisorBtn" name="accountType" onclick="ShowHideDiv()" />
                        Advisor
                    </label>
                    <hr />
                    <div id="dvStudent" style="display: none">
                        Please enter your class access code
                        <br />
                        <label for="AccessCode"> Access Code </label>
                        <input type="text" id="AccessCode" @bind="accessCode" placeholder="Ex: 12345" /> <br />
                    </div>
                    <br/>
                    <input type="button" @onclick="SubmitNewAccount" class="btn" value="Submit"/>

                    <Popup @ref="popupRef" />
                    
                    <br/> <br/>
                    <input type="button" @onclick="Back" class="btn" value="Back"/>

                </div>
            </form>
            
        </div>
    </body>
    
    
}

@code {

    private User user = new User();
    private string name, password, hashed;
    private List<string> accounts = new List<string>();
    private string UserFolderPath = Directory.GetCurrentDirectory() + @"\UserRecords\";
    private string GenFolderPath = Directory.GetCurrentDirectory() + @"\UserRecords\General\";

    private bool correctAccount = true, correctPassword = true, Teacher = false, Student = false;

    HashAlgorithmName hashAlgorthm = HashAlgorithmName.SHA512;

    private bool hasAccount = true;

    protected override async Task OnInitializedAsync()
    {
        foreach (string file in Directory.GetFiles(UserFolderPath))
        {
            accounts.Add(Path.GetFileNameWithoutExtension(file));
        }
    }


    private void Submit()
    {
        correctAccount = true;
        correctPassword = true;

        // for testing purposes only
        if(name == "test")
        {
            User.UserName = name;
            User.user = user;
            User.user.buildUser();
            UriHelper.NavigateTo($"persona");
            return;
        }

        if(name == null)
        {
            correctAccount = false;
            return;
        }
        else if(password == null)
        {
            correctPassword = false;
            return;
        }

        if (!accounts.Contains(name))
        {
            correctAccount = false;
            return;
        }

        User.UserName = name;
        User.user = user;
        User.user.buildUser();

        // Generate a 128-bit salt using a sequence of
        // cryptographically strong random bytes.
        // byte[] salt = RandomNumberGenerator.GetBytes(128 / 8); // divide by 8 to convert bits to bytes

        byte[] salt = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };

        // derive a 256-bit subkey (use HMACSHA256 with 100,000 iterations)
        hashed = Convert.ToBase64String(KeyDerivation.Pbkdf2(
            password: password!,
            salt: salt,
            prf: KeyDerivationPrf.HMACSHA256,
            iterationCount: 100000,
            numBytesRequested: 256 / 8));


        if (User.user.Password == hashed)
        {
            UriHelper.NavigateTo($"persona");
        }
        else{
            correctPassword = false;
            return;
        }
    }

    private void newAccount(){
        hasAccount = false;
    }

    private void Back()
    {
        hasAccount = true;
    }

    private string newName, newPassword1, newPassword2, accountInfo, accountType, accessCode;
    private bool validCode;
    private string message;
    private async void SubmitNewAccount()
    {
        accountInfo = "";

        accountType = await JS.InvokeAsync<string>("RadioButtons", "accountType");

        bool specChar = false;
        bool numChar = false;
        string regexItem = "^[!@#$%^&*(),.?\":{ }|<>]*$";

        foreach(char s in newPassword1)
        {
            if (regexItem.Contains(s))
            {
                specChar = true;
            }
            else if (char.IsDigit(s))
            {
                numChar = true;
            }
        }

        if (newName == null || newPassword1 == null || newPassword2 == null)
        {
            // please fill in all your infomation
            message = "Information missing";
            await Alert(message);
        }
        else if (accounts.Contains(newName))
        {
            // account name already taken
            message = "Account name invalid";
            await Alert(message);
        }
        else if (newPassword1 != newPassword2)
        {
            // passwords are not the same
            message = "Passwords do not match";
            await Alert(message);
        }
        else if (newPassword1.Length < 9)
        {
            //password too short
            message = "Password too short";
            await Alert(message);
        }
        else if (!newPassword1.Any(char.IsUpper))
        {
            //No uppercase number in password
            message = "No uppercase letter in password";
            await Alert(message);
        }
        else if (!newPassword1.Any(char.IsLower))
        {
            //No lowercase letter in password
            message = "No lowercase letter in password";
            await Alert(message);
        }
        else if (!specChar)
        {
            //No special character in password
            message = "No special character";
            await Alert(message);
        }
        else if (newPassword1.Contains(" "))
        {
            //Whitespace found in password
            message = "Space in password";
            await Alert(message);
        }
        else if (!numChar)
        {
            //No number in password
            message = "No number in password";
            await Alert(message);
        }
        else if (accountType == "none")
        {
            // please select a account type
            message = "No valid account type";
            await Alert(message);
        }
        else
        {
            if (accountType == "Student")
            {

                // Read a text file line by line.
                validCode = false;
                foreach (string code in File.ReadAllLines(GenFolderPath + "Access Codes.txt"))
                {
                    if (accessCode == code)
                    {
                        validCode = true;
                    }
                }

                if (!validCode)
                {
                    message = "Wrong access code";
                    await Alert(message);
                    return;
                }
            }
            FileStream FileWrite = new FileStream(UserFolderPath + newName + ".txt", FileMode.Create, FileAccess.Write, FileShare.None);

            accountInfo += "NAME|\n" + newName + "\n";

            byte[] salt = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };

            // derive a 256-bit subkey (use HMACSHA256 with 100,000 iterations)
            hashed = Convert.ToBase64String(KeyDerivation.Pbkdf2(
                password: newPassword1!,
                salt: salt,
                prf: KeyDerivationPrf.HMACSHA256,
                iterationCount: 100000,
                numBytesRequested: 256 / 8));

            accountInfo += "PASSWORD|\n" + hashed + "\n";

            accountInfo += "TYPE|\n" + accountType + "\n";

            accountInfo += "GENERAL|\nGeneral information\nBADGES|\nNo badges yet\nITEMS|\nNo items yet\nSTUFF|\nRandom information\nLEVEL|\n0\n";

            accountInfo += "DISTRIBUTION|\n";

            // Read a text file line by line.
            foreach (string skills in File.ReadAllLines(GenFolderPath + "User Skills.txt"))
            {
                string[] skill = skills.Split(";");
                accountInfo += skill[0] + ";0;" + skill[1] + ";" + skill[2] + "\n";
            }

            accountInfo += "TAKEN ASSIGNMENTS|\n";

            // Store the text in a byte array with. UTF8 encoding (8-bit Unicode. Transformation Format)
            byte[] writeArr = Encoding.UTF8.GetBytes(accountInfo);

            // Using the Write method write the encoded byte array to the textfile
            FileWrite.Write(writeArr, 0, accountInfo.Length);

            // Close the FileStream object
            FileWrite.Close();

            User.UserName = newName;
            User.user = user;
            User.user.buildUser();

            UriHelper.NavigateTo($"persona");
        }
    }
    private Popup popupRef;
    public async Task Alert(string message)
    {
        popupRef.Show(message);
    }
}

<style>
    * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    min-height: 100vh;
    background: white;
    display: flex;
    font-family: sans-serif;
}

.container {
    margin: auto;
    width: 500px;
    max-width: 90%;
}

.container form {
    width: 100%;
    height: 100%;
    padding: 20px;
    background: white;
    border-radius: 4px;
    box-shadow: 0 8px 16px rgba(0,0,0);
}

.container form h1 {
    text-align: center;
    margin-bottom: 24px;
    color: black;
}

.container form .form-control {
    width: 100%;
    height: 40px;
    background: white;
    border-radius: 4px;
    border: 1px solid silver;
    margin: 10px 0 18px 0;
    padding: 0 10px;
}

.container form .btn {
    margin-left: 50%;
    transform: translateX(-50%);
    width: 120px;
    height: 34px;
    border: none;
    outline: none;
    background: #1b6ec2;
    cursor: pointer;
    font-size: 16px;
    text-transform: uppercase;
    color: white;
    radius: 4px;
    transition: .3s;
}

.container form .btn:hover {
    opacity: .7;
}
</style>