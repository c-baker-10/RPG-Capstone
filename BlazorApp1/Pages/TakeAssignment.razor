@page "/takeassignment/{name}"

@using Objects

@inject NavigationManager UriHelper
@inject IJSRuntime JS;

@if (!Review)
{
    <h3>Take assignment</h3>

    @foreach (AssignmentQuestion Q in Questions)
    {
        <p> @Q.question </p>
        <from>
            @foreach (string Op in Q.options)
            {
                <input type="@Q.type" id=@Op  name="@Q.type" value="@Op"/>
                <label> @Op</label> 
                <br/>
            }
        </from>
    }

<br />
<button class="btn btn-primary" @onclick="Submit">Submit</button>

}
else{
    <h3>Assignment taken</h3>

    @foreach(AssignmentQuestion Q in Questions)
    {
        if(Q.inputedAnswers != null)
        {
            <p>@Q.question</p>
            foreach(string ans in Q.inputedAnswers)
            {
                <p>@ans</p>
            }
            <p> Answer: @Q.correct</p>
        }
    }
    <button class="btn btn-primary" @onclick="Finished">Finished</button>
}


@code {

    [Parameter]
    public string name { get; set; }

    private string FolderPath =  Directory.GetCurrentDirectory() + @"\AssignmentFolder\";
    private List<AssignmentQuestion> Questions;
    private User user = new User();
    AssignmentQuestion question;
    private bool QuestionSec, TypeSec, OptionSec, AnswerSec, points, Distribution;
    private bool Review = false;

    private string inputAnswer;


    protected override async Task OnInitializedAsync()
    {
        user.buildUser();

        Questions = new List<AssignmentQuestion>();
        QuestionSec = false;
        TypeSec = false;
        OptionSec = false;
        AnswerSec = false;
        points = false;
        Distribution = false;


        // Read a text file line by line.
        string[] lines = File.ReadAllLines(FolderPath + name);

        foreach (string line in lines)
        {
            if (line.Trim() == "questions|")
            {
                QuestionSec = true;
                TypeSec = false;
                OptionSec = false;
                AnswerSec = false;
                points = false;
                Distribution = false;
                continue;
            }
            else if (line.Trim() == "type|")
            {
                QuestionSec = false;
                TypeSec = true;
                OptionSec = false;
                AnswerSec = false;
                points = false;
                Distribution = false;
                continue;
            }
            else if (line.Trim() == "options|")
            {
                QuestionSec = false;
                TypeSec = false;
                OptionSec = true;
                AnswerSec = false;
                points = false;
                Distribution = false;
                continue;
            }
            else if (line.Trim() == "answer|")
            {
                QuestionSec = false;
                TypeSec = false;
                OptionSec = false;
                AnswerSec = true;
                points = false;
                Distribution = false;
                continue;
            }
            else if (line.Trim() == "Points|")
            {
                QuestionSec = false;
                TypeSec = false;
                OptionSec = false;
                AnswerSec = false;
                points = true;
                Distribution = false;
                continue;
            }
            else if (line.Trim() == "DISTRIBUTION|")
            {
                QuestionSec = false;
                TypeSec = false;
                OptionSec = false;
                AnswerSec = false;
                points = false;
                Distribution = true;
                continue;
            }
            else if (line.Trim() == "end|")
            {
                QuestionSec = false;
                TypeSec = false;
                OptionSec = false;
                AnswerSec = false;
                points = false;
                Distribution = false;
                Questions.Add(question);
                continue;
            }

            if (QuestionSec)
            {
                question = new AssignmentQuestion(line);
            }
            else if (TypeSec)
            {
                question.type = line;
            }
            else if (OptionSec)
            {
                question.options = line.Split(';');
            }
            else if (AnswerSec)
            {
                question.answers = line.Split(';');
            }
            else if (points)
            {
                question.points = Int32.Parse(line);
            }
            else if (Distribution)
            {
                question.skillValueDistribution.Add(line.Split(";"));
            }
        }
    }

    public async void Submit()
    {
        string ans = "";
        foreach (AssignmentQuestion Q in Questions)
        {
            ans = await JS.InvokeAsync<string>("input", Q.type);
            Q.inputedAnswers = ans.Split(';');
            Q.correctInput();
        }

        Review = true;

        StateHasChanged();
    }

    public void Finished()
    {
        int totalPoints = 0;
        int totalUserPoints = 0;
        foreach (AssignmentQuestion Q in Questions)
        {
            if(Q.correct)
            {
                totalUserPoints += Q.points;
                foreach (string[] distribution in Q.skillValueDistribution)
                {
                    foreach (string[] skill in user.skillDistribution)
                    {
                        if(skill[0] == distribution[0])
                        {
                            skill[1] = Int32.Parse(skill[1]) + Int32.Parse(distribution[1]) + "";
                        }
                    }
                }
            }
            totalPoints += Q.points;
        }

        foreach (Assignment A in Assignment.AssignmentList)
        {
            if (A.assignmentName == name)
            {
                A.score = (totalUserPoints / totalPoints) * 100 + "";
                A.taken = true;
            }
        }

        UriHelper.NavigateTo($"assignments");
    }

}
